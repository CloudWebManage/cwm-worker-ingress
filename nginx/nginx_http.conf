events {
        worker_connections 2048;
}

http {
    lua_shared_dict prometheus_metrics 10M;
    init_worker_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
    }

    server {
        listen 9145;
        location /metrics {
            content_by_lua_block {
                prometheus:collect()
            }
        }
    }

    server {
        include extra-pre.conf;
        include resolver.conf;
        include http_listen.conf;
        ignore_invalid_headers off;
        client_max_body_size 0;
        proxy_buffering off;
        location / {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_connect_timeout       300;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            chunked_transfer_encoding off;
            proxy_pass http://$http_host:8080;
        }
        include extra-post.conf;
        include metric_lua.conf;
    }
}
